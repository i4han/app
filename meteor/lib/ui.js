// Generated by CoffeeScript 1.8.0
module.exports.ui = {
  html: {
    jade: ' ',
    head: function() {
      return {
        title: this.Settings.title,
        '%a': "link(rel='stylesheet' href='" + this.Theme.fontStylesheet + "')",
        '%c': "script(type='text/javascript' src='<%= @googlemap_input %>')",
        '%d': "meta(name='viewport', content='initial-scale=1.0, user-scalable=no')",
        '%e': "meta(charset='utf-8')"
      };
    },
    eco: function() {
      return {
        googlemap_input: function() {
          return x.urlWithQuery(Settings.google.map_input);
        }
      };
    },
    styl: function() {
      return {
        html: {
          height: '100%'
        },
        body: {
          height: '100%',
          fontFamily: this.Theme.fontFamily,
          fontWeight: this.Theme.fontWeight
        }
      };
    }
  },
  form: {
    jade: "if visible\n    .input-group.margin-bottom-sm\n       span.input-group-addon: i.fa.fa-fw(class=\"fa-{{icon}}\")\n       input.form-control(id=\"{{id}}\" type=\"{{type}}\" placeholder=\"{{label}}\" title=\"{{title}}\" data-toggle=\"popover\" data-trigger=\"hover\" data-placement=\"right\" data-html=\"true\")",
    helpers: {
      type: function() {
        return this.type || "text";
      },
      visible: function() {
        return x.isVisible(this.visible);
      },
      id: function() {
        return this.id || x.dasherize(this.label.toLowerCase().trim());
      },
      title: function() {
        return this.title;
      }
    },
    styl$: {
      '.popover': {
        fontFamily: "'PT Sans', sans-serif",
        width: 200
      },
      '.popover-title': {
        fontSize: 14
      },
      '.popover-content': {
        fontSize: 12,
        padding: '5px 0px'
      },
      '.popover-content > ul': {
        paddingLeft: 32
      },
      '.popover-inner': {
        width: '100%'
      }
    }
  },
  address: {
    styl: {
      'html, body, #map-canvas': {
        height: '100%',
        margin: 0,
        padding: 0
      },
      '.controls': {
        marginTop: 16,
        border: '1px solid transparent',
        borderRadius: '2px 0 0 2px',
        boxSizing: 'border-box',
        MozBoxSizing: 'border-box',
        height: 32,
        outline: 'none',
        boxShadow: '0 2px 6px rgba(0, 0, 0, 0.3)'
      },
      '#pac-input': {
        backgroundColor: '#fff',
        fontSize: 15,
        fontWeight: '300',
        marginLeft: 12,
        padding: '0 11px 0 13px',
        textOverflow: 'ellipsis',
        width: 400
      },
      '#pac-input:focus': {
        borderColor: '#4d90fe'
      },
      '#type-selector': {
        color: '#fff',
        backgroundColor: '#4d90fe',
        padding: '5px 11px 0px 11px'
      },
      '#type-selector label': {
        fontSize: 13,
        fontWeight: '300'
      }
    }
  },
  button: {
    jade: "if visible\n    button.btn(class=\"{{class}}\" id=\"{{id}}\" type=\"{{type}}\") {{label}}",
    helpers: {
      type: function() {
        return this.type || "button";
      },
      visible: function() {
        return x.isVisible(this.visible);
      },
      id: function() {
        return this.id || x.dasherize(this.label.toLowerCase().trim());
      },
      "class": function() {
        return this["class"] || 'btn-primary';
      }
    },
    styl$: {
      '.btn': {
        fontFamily: 'PT Sans',
        width: 150,
        border: 0,
        marginTop: 5
      },
      '.btn-default': {
        backgroundColor: '#f8f8f8'
      },
      '.btn-primary': {
        border: 0
      },
      '.btn-success': {
        border: 0
      },
      '.btn-info': {
        border: 0
      },
      '.btn-warning': {
        border: 0
      },
      '.btn-danger': {
        border: 0
      },
      '.btn-default:hover': {
        border: 0
      },
      '.btn-primary:hover': {
        border: 0
      },
      '.btn-success:hover': {
        border: 0
      },
      '.btn-info:hover': {
        border: 0
      },
      '.btn-warning:hover': {
        border: 0
      },
      '.btn-danger:hover': {
        border: 0
      }
    }
  },
  dialog: {
    jade: "button.btn(href=\"#myModal\" role=\"button\" data-toggle=\"modal\") Modal\n.modal.fade#myModal(tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\")\n    .modal-dialog: .modal-content\n        .modal-header\n            button.close(type=\"button\" data-dismiss=\"modal\" aria-hidden=\"true\") Ã—\n            h3#myModalLabel {{modalHeader}}\n        .modal-body\n            p {{modalBody}}\n        .modal-footer\n            button.btn(data-dismiss=\"modal\" aria-hidden=\"true\") {{modalCloseButton}}\n            button.btn.btn-primary {{modalActionButton}}",
    helpers: {
      modalHeader: function() {
        return "Modal Header";
      },
      modalBody: function() {
        return "One fine body!";
      },
      modalCloseButton: function() {
        return "Close";
      },
      modalActionButton: function() {
        return "Save Changes";
      }
    },
    styl$: {
      '.modal-backdrop': {
        opacity: '0.50'
      }
    }
  },
  a: {
    jade: "if visible\n    a(class=\"{{class}}\" id=\"{{id}}\") {{label}}",
    helpers: {
      visible: function() {
        return x.isVisible(this.visible);
      },
      id: function() {
        return this.id || x.dasherize(this.label.toLowerCase().trim());
      },
      "class": function() {
        return this["class"];
      }
    }
  },
  menu: {
    jade: "if visible\n    if divider\n        li.divider\n    else\n        li: a(id=\"{{id}}\" class=\"{{class}}\" style=\"{{style}}\")\n            i.fa(class=\"fa-{{icon}}\" class=\"{{icon_class}}\")\n            | {{label}}",
    helpers: {
      visible: function() {
        return x.isVisible(this.visible);
      },
      id: function() {
        return this.id;
      },
      icon: function() {
        return this.icon;
      },
      "class": function() {
        return this["class"] || 'menu-list';
      },
      style: function() {
        return this.style;
      },
      icon_class: function() {
        return this.icon_class || 'dropdown-menu-icon';
      },
      label: function() {
        return this.label;
      },
      divider: function() {
        if (this.label === '-') {
          return true;
        }
      }
    }
  },
  alert: {
    jade: {
      'if visible': {
        '.alert(class="{{class}}") {{message}}': ''
      }
    },
    helpers: {
      visible: function() {
        return x.isVisible(this.visible) && this.message;
      },
      "class": function() {
        return this["class"] || 'alert-success';
      }
    }
  },
  br: {
    jade$: "br(style='line-height:{{height}};')"
  }
};
